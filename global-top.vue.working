<template>
  <div class="global-background-scale-wrapper">
    <GlobalBackgroundManager />
  </div>
  <BackgroundSelector />
</template>

<script setup>
import { onMounted, onUnmounted } from "vue";
import GlobalBackgroundManager from "./components/GlobalBackgroundManager.vue";
import BackgroundSelector from "./components/BackgroundSelector.vue";

let resizeObserver = null;

function computeAndApplyScale() {
  const wrapper = document.querySelector(".global-background-scale-wrapper");
  if (!wrapper) return;

  // Method 1: Check if the background is actually filling the viewport
  const bgContainer = wrapper.querySelector(".global-background-container");
  if (bgContainer) {
    // Get the actual rendered size
    const rect = bgContainer.getBoundingClientRect();
    const actualWidth = rect.width;
    const windowWidth = window.innerWidth;

    // Only apply scale if the background is not filling the viewport
    if (Math.abs(actualWidth - windowWidth) > 1) {
      // Background is not filling viewport, need to compensate
      const scaleNeeded = windowWidth / actualWidth;

      wrapper.style.transform = `scale(${scaleNeeded})`;
      wrapper.style.transformOrigin = "top left";

      console.log(
        `Background width: ${actualWidth}, Window width: ${windowWidth}`
      );
      console.log(`Applied scale: ${scaleNeeded} to fill viewport`);

      // Verify after a moment
      setTimeout(() => {
        const newRect = bgContainer.getBoundingClientRect();
        console.log(`After scaling: Background width is now ${newRect.width}`);
      }, 100);
    } else {
      // Background already fills viewport, no scale needed
      wrapper.style.transform = "none";
      console.log("Background already fills viewport, no scaling needed");
    }
  }
}

onMounted(() => {
  // Wait for DOM to settle
  setTimeout(() => {
    computeAndApplyScale();
  }, 100);

  // Recompute on window resize
  window.addEventListener("resize", computeAndApplyScale);

  // Watch for DOM changes
  resizeObserver = new ResizeObserver(() => {
    computeAndApplyScale();
  });

  const wrapper = document.querySelector(".global-background-scale-wrapper");
  if (wrapper) {
    resizeObserver.observe(wrapper);
  }

  // Also recompute after slide transitions
  document.addEventListener("slidechanged", computeAndApplyScale);
});

onUnmounted(() => {
  window.removeEventListener("resize", computeAndApplyScale);
  document.removeEventListener("slidechanged", computeAndApplyScale);
  if (resizeObserver) {
    resizeObserver.disconnect();
  }
});
</script>

<style>
.global-background-scale-wrapper {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100vw !important;
  height: 100vh !important;
  z-index: -1 !important;
  pointer-events: none !important;
  transform-origin: top left !important;
}

/* Ensure children don't interfere */
.global-background-scale-wrapper > * {
  pointer-events: none !important;
}

/* Except the selector which needs to be interactive */
.background-selector {
  pointer-events: auto !important;
}
</style>
